-- Create "writingprompts-pairwise-test" table
CREATE TABLE IF NOT EXISTS "writingprompts-pairwise-test" (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  prompt TEXT NOT NULL,
  chosen TEXT,
  rejected TEXT,
  timestamp_chosen TIMESTAMPTZ,
  timestamp_rejected TIMESTAMPTZ,
  upvotes_chosen INTEGER,
  upvotes_rejected INTEGER,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable Row Level Security (RLS) on "writingprompts-pairwise-test"
ALTER TABLE "writingprompts-pairwise-test" ENABLE ROW LEVEL SECURITY;

-- Create profiles table
CREATE TABLE IF NOT EXISTS profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  username TEXT UNIQUE,
  score INTEGER DEFAULT 0,
  viewed_prompts UUID[] DEFAULT '{}',
  age_range TEXT,
  education_level TEXT,
  first_language TEXT,
  literature_interest TEXT,
  reading_habits TEXT,
  writing_background TEXT,
  demographics_completed BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on profiles
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Create user_feedback table
CREATE TABLE IF NOT EXISTS user_feedback (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  prompt_id UUID REFERENCES "writingprompts-pairwise-test"(id) NOT NULL,
  selected_text TEXT NOT NULL,
  is_correct BOOLEAN NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on user_feedback
ALTER TABLE user_feedback ENABLE ROW LEVEL SECURITY;

-- Create rationales table
CREATE TABLE IF NOT EXISTS rationales (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  prompt_id UUID REFERENCES "writingprompts-pairwise-test"(id) NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  rationale TEXT NOT NULL,
  highlight_text TEXT,
  is_correct BOOLEAN,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on rationales
ALTER TABLE rationales ENABLE ROW LEVEL SECURITY;

-- Create human_model_evaluations table
CREATE TABLE IF NOT EXISTS human_model_evaluations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id),
  prompt_id UUID REFERENCES "writingprompts-pairwise-test"(id) NOT NULL,
  model_name TEXT NOT NULL,
  guess_correct BOOLEAN NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on human_model_evaluations
ALTER TABLE human_model_evaluations ENABLE ROW LEVEL SECURITY;

-- Create hf_data_visualization table
CREATE TABLE IF NOT EXISTS public.hf_data_visualization (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Assuming auto-incrementing PK
  integer_column INTEGER,
  text_column TEXT,
  timestamp_column TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on hf_data_visualization (assuming it might be needed, adjust if not)
ALTER TABLE public.hf_data_visualization ENABLE ROW LEVEL SECURITY;

-- Create writingprompts-generations table (for pre-existing dataset with RM choices)
CREATE TABLE IF NOT EXISTS public.writingprompts_generations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  prompt TEXT NOT NULL,
  generated_response_A TEXT NOT NULL,
  generated_response_B TEXT NOT NULL,
  rm_choice TEXT NOT NULL, -- Should be 'A' or 'B'
  created_at TIMESTAMPTZ DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on writingprompts-generations
ALTER TABLE public.writingprompts_generations ENABLE ROW LEVEL SECURITY;

-- Create live_generations table for new AI generations based on existing prompts
CREATE TABLE IF NOT EXISTS public.live_generations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  prompt_id UUID REFERENCES "writingprompts-pairwise-test"(id) NOT NULL,
  model_a_name TEXT NOT NULL,
  response_a_text TEXT NOT NULL,
  model_b_name TEXT NOT NULL,
  response_b_text TEXT NOT NULL,
  generation_parameters_a JSONB NULL,
  generation_parameters_b JSONB NULL,
  created_at TIMESTAMPTZ DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on live_generations
ALTER TABLE public.live_generations ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to read and insert live generations
CREATE POLICY "Allow authenticated read access to live_generations"
ON public.live_generations
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Allow authenticated insert access to live_generations"
ON public.live_generations
FOR INSERT
TO authenticated
WITH CHECK (true);

-- Create dataset_downloads table
CREATE TABLE IF NOT EXISTS dataset_downloads (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  downloaded_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on dataset_downloads
ALTER TABLE dataset_downloads ENABLE ROW LEVEL SECURITY;

-- Create evaluation_quality_metrics table
CREATE TABLE IF NOT EXISTS evaluation_quality_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  evaluation_time_ms INTEGER,
  prompt_similarity DOUBLE PRECISION,
  confidence_score DOUBLE PRECISION,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on evaluation_quality_metrics
ALTER TABLE evaluation_quality_metrics ENABLE ROW LEVEL SECURITY;

-- Create RLS policies

-- Profiles policies
CREATE POLICY "Users can view their own profile"
  ON profiles FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id);

-- User feedback policies
CREATE POLICY "Users can view their own feedback"
  ON user_feedback FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own feedback"
  ON user_feedback FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Prompts policies
CREATE POLICY "Prompts are viewable by everyone"
  ON "writingprompts-pairwise-test" FOR SELECT
  USING (true);

-- Rationales policies
CREATE POLICY "Rationales are viewable by everyone"
  ON rationales FOR SELECT
  USING (true);
CREATE POLICY "Users can insert their own rationales"
  ON rationales FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Human model evaluation policies
CREATE POLICY "Users can insert their own human_model_evaluations"
  ON human_model_evaluations FOR INSERT
  WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view their own human_model_evaluations"
  ON human_model_evaluations FOR SELECT
  USING (auth.uid() = user_id);

-- Dataset downloads policies
CREATE POLICY "Dataset downloads are viewable by everyone"
  ON dataset_downloads FOR SELECT
  USING (true);
CREATE POLICY "Users can insert their own dataset downloads"
  ON dataset_downloads FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- Evaluation quality metrics policies
CREATE POLICY "Users can insert their own evaluation quality metrics"
  ON evaluation_quality_metrics FOR INSERT
  WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view their own evaluation quality metrics"
  ON evaluation_quality_metrics FOR SELECT
  USING (auth.uid() = user_id);

-- Create a function to handle new user signups
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (
    id,
    username,
    score,
    viewed_prompts,
    demographics_completed
  )
  VALUES (new.id, new.email, 0, '{}', FALSE);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a trigger to call the function on user signup

CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Human vs model evaluation policies
CREATE POLICY "Users can insert their own human vs model evaluation"
  ON human_model_evaluations FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own human vs model evaluations"
  ON human_model_evaluations FOR SELECT
  USING (auth.uid() = user_id);

-- Create model_evaluations table
CREATE TABLE IF NOT EXISTS model_evaluations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  prompt_id UUID REFERENCES "writingprompts-pairwise-test"(id) NOT NULL,
  model_name TEXT NOT NULL,
  selected_response TEXT NOT NULL,
  ground_truth TEXT NOT NULL,
  is_correct BOOLEAN NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on model_evaluations
ALTER TABLE model_evaluations ENABLE ROW LEVEL SECURITY;

-- Model evaluation policies
CREATE POLICY "Users can insert their own model evaluation"
  ON model_evaluations FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own model evaluations"
  ON model_evaluations FOR SELECT
  USING (auth.uid() = user_id);

-- Create model_comparisons table
CREATE TABLE IF NOT EXISTS model_comparisons (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  model_a TEXT NOT NULL,
  model_b TEXT NOT NULL,
  winner TEXT NOT NULL,
  prompt_id UUID REFERENCES live_generations(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on model_comparisons
ALTER TABLE model_comparisons ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can insert their own model comparisons"
  ON model_comparisons FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own model comparisons"
  ON model_comparisons FOR SELECT
  USING (auth.uid() = user_id);

-- Create model_writing_rationales table
CREATE TABLE IF NOT EXISTS model_writing_rationales (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  prompt_id UUID REFERENCES "writingprompts-pairwise-test"(id) NOT NULL,
  model_name TEXT NOT NULL,
  selected_response TEXT NOT NULL,
  ground_truth TEXT NOT NULL,
  is_correct BOOLEAN NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS on model_writing_rationales
ALTER TABLE model_writing_rationales ENABLE ROW LEVEL SECURITY;

-- Model writing rationales policies
CREATE POLICY "Users can insert their own model writing rationale"
  ON model_writing_rationales FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own model writing rationales"
  ON model_writing_rationales FOR SELECT
  USING (auth.uid() = user_id);
